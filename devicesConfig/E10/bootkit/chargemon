#!/system/xbin/sh

# if the file exists then no need to catch button events
if [ ! -e /cache/recovery/boot ]
then
   DEVICE=`cat /system/recovery/model`

   case $DEVICE in
       X10*)
           cat /dev/input/event2 > /dev/keycheck& ;;
       E10*)
           cat /dev/input/event1 > /dev/keycheck& ;;
       U20*)
           cat /dev/input/event0 > /dev/keycheck& ;;
       E15*)
           cat /dev/input/event1 > /dev/keycheck& ;;
   esac

   sleep 3
   kill -9 $!
fi

# boot into recovery
if [ -s /dev/keycheck -o -e /cache/recovery/boot ]
then
    # if a recovery image kernel is present, run it and
    # boot straight into recovery
    if [ -e /system/recovery/recovery.img ]
    then
       umount /cache
       umount /sdcard
       umount /cdrom
       umount /data/DxDrm/fuse
       killall -9 DxDrmServerIpc
       insmod /system/kernel/splboot21.ko
       insmod /system/kernel/splboot23.ko
       sync
       cat /system/kernel/miniloader > /proc/splboot/image
       cat /system/recovery/recovery.img > /proc/splboot/boot_img
       echo > /proc/splboot/boot
    fi

    # if not, check for old fashion recovery and boot it
    if [ -e /system/recovery/recovery.tar.bz2 ]
    then
    	rm -r /cache/recovery/boot
    	# remount rootfs rw
    	mount -o remount,rw rootfs /
    	# Umount MTDs
    	umount -l /cache
    	umount -l /data
    	# Mount recovery partition
    	cd /
    	rm -r /sbin
    	rm -r /etc
    	rm -r /sdcard
    	tar -xjf /system/recovery/recovery.tar.bz2
    	# Umount /system
    	umount -l /system
    	# chroot
    	chroot / /init
    	exit
    fi
fi

# /system/kernel/kexecboot for permanent boot on cust kernel
# renamed to kexecbooted once booted
if [ -e /data/local/tmp/kexecboot -o -e /system/kernel/kexecboot ]
then
    busybox mount -o remount,rw /system
    busybox cp /system/kernel/modules /system/lib/modules
    chmod 644 /system/lib/modules/*ko
    rm -r /data/local/tmp/kexecboot
    mv /system/kernel/kexecboot /system/kernel/kexecbooted
    umount /cache
    umount /sdcard
    umount /cdrom
    umount /data/DxDrm/fuse
    killall -9 DxDrmServerIpc
    insmod /system/kernel/splboot21.ko
    insmod /system/kernel/splboot23.ko
    sync
    cat /system/kernel/miniloader > /proc/splboot/image
    cat /system/kernel/boot.img > /proc/splboot/boot_img
    echo > /proc/splboot/boot
else
    busybox mount -o remount,rw /system
    busybox cp /system/kernel/modules_stock /system/lib/modules
    chmod 644 /system/lib/modules/*ko
fi

# if booted a custom kernel, reset flag for next reboot
if [ -e /system/kernel/kexecbooted ]
then
    busybox mount -o remount,rw /system
    mv /system/kernel/kexecbooted /system/kernel/kexecboot
fi

/system/bin/charger

sync
mount -o remount,rw,noatime /dev/block/mtdblock2 /system
sync
mount -o remount,noatime /dev/block/mtdblock3 /data
sync
mount -o remount,noatime /dev/block/mtdblock1 /cache

# custom rom with stock kernel
if [ -e /system/kernel/ramdisk.tar ]
then
     # remount rw
     mount -o remount,rw rootfs /
     cd /
     rm -r /sdcard
     rm init*
     rm logo.rle
     rm default.prop
     tar -xf /system/kernel/ramdisk.tar
     chroot / /init
     exit
fi

# Continue booting
exit